{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","key","description","src","App","state","currentKey","e","toUpperCase","filter","entry","length","audio","document","getElementById","load","play","this","setState","_this2","addEventListener","playAudio","_this3","removeEventListener","_this4","buttons","map","react_default","a","createElement","onClick","className","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAO,CACX,CACEC,IAAK,IACLC,YAAa,WACbC,IAAK,4DAEP,CACEF,IAAK,IACLC,YAAa,WACbC,IAAK,4DAEP,CACEF,IAAK,IACLC,YAAa,WACbC,IAAK,4DAEP,CACEF,IAAK,IACLC,YAAa,WACbC,IAAK,8DAEP,CACEF,IAAK,IACLC,YAAa,OACbC,IAAK,4DAEN,CACCF,IAAK,IACLC,YAAa,OACbC,IAAK,8DAEP,CACEF,IAAK,IACLC,YAAa,eACbC,IAAK,8DAEP,CACEF,IAAK,IACLC,YAAa,WACbC,IAAK,0DAEP,CACEF,IAAK,IACLC,YAAa,WACbC,IAAK,4DAgEMC,6MA3DbC,MAAQ,CACNC,WAAY,6EAGJC,GACR,IAAIN,EAAMM,EAAEN,IAAIO,cAGhB,GAFY,MAARP,IAAaA,EAAM,KAEnBD,EAAKS,OAAO,SAAAC,GAAK,OAAIA,EAAMT,MAAQA,IAAKU,OAAS,EAAG,CACtD,IAAMC,EAAQC,SAASC,eAAeb,GAEtCW,EAAMG,OACNH,EAAMI,OAENC,KAAKC,SAAS,CACZZ,WAAYN,EAAKS,OAAO,SAAAC,GAAK,OAAIA,EAAMT,MAAQA,IAAK,GAAGC,2DAKzC,IAAAiB,EAAAF,KAClBJ,SAASO,iBAAiB,UAAW,SAAAb,GAAC,OAAIY,EAAKE,UAAUd,oDAGpC,IAAAe,EAAAL,KACrBJ,SAASU,oBAAoB,UAAW,SAAAhB,GAAC,OAAIe,EAAKD,UAAUd,sCAGrD,IAAAiB,EAAAP,KACDQ,EAAUzB,EAAK0B,IAAI,SAAAnB,GACvB,OACEoB,EAAAC,EAAAC,cAAA,UACE5B,IAAKM,EAAEN,IACP6B,QAAS,kBAAMN,EAAKH,UAAUd,IAC9BwB,UAAU,WACVC,GAAIzB,EAAEL,aACHK,EAAEN,IACH0B,EAAAC,EAAAC,cAAA,SACEE,UAAU,OACVC,GAAIzB,EAAEN,IACNE,IAAKI,EAAEJ,SAMjB,OACEwB,EAAAC,EAAAC,cAAA,OAAKG,GAAG,gBACNL,EAAAC,EAAAC,cAAA,OAAKG,GAAG,WACLf,KAAKZ,MAAMC,YAEdqB,EAAAC,EAAAC,cAAA,OAAKG,GAAG,oBACLP,WArDOQ,aCvCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7ed8b4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst data = [\n  {\n    key: \"Q\",\n    description: \"Heater 1\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    key: \"W\",\n    description: \"Heater 2\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    key: \"E\",\n    description: \"Heater 3\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    key: \"A\",\n    description: \"Heater 4\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    key: \"S\",\n    description: \"Clap\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n   {\n    key: \"D\",\n    description: \"Kick\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    key: \"Z\",\n    description: \"Kick and Hat\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    key: \"X\",\n    description: \"Hi Hat 1\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    key: \"C\",\n    description: \"Hi Hat 2\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n]\n\nclass App extends Component {\n  state = {\n    currentKey: \"\"\n  }\n\n  playAudio(e) {\n    let key = e.key.toUpperCase();\n    if (key === \"Y\") key = \"Z\";\n    \n    if (data.filter(entry => entry.key === key).length > 0) {\n      const audio = document.getElementById(key);\n\n      audio.load();\n      audio.play();\n      \n      this.setState({\n        currentKey: data.filter(entry => entry.key === key)[0].description\n      })\n    }\n  }\n  \n  componentDidMount() {\n    document.addEventListener(\"keydown\", e => this.playAudio(e));\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", e => this.playAudio(e));\n  }\n  \n  render() {\n    const buttons = data.map(e => {\n      return (\n        <button \n          key={e.key}\n          onClick={() => this.playAudio(e)}\n          className=\"drum-pad\"\n          id={e.description} >\n            {e.key}\n            <audio \n              className=\"clip\"\n              id={e.key}\n              src={e.src} >\n            </audio>\n        </button>\n      )\n    })\n  \n    return (\n      <div id=\"drum-machine\">\n        <div id=\"display\">\n          {this.state.currentKey}\n        </div>\n        <div id=\"button-container\">\n          {buttons}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}